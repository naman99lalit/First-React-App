{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","name","id","email","className","src","alt","CardList","robots","map","user","i","key","username","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filterRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCHSC,EAbF,SAACC,GAAW,IACdC,EAAiBD,EAAjBC,KAAKC,EAAYF,EAAZE,GAAGC,EAASH,EAATG,MACf,OACA,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BH,EAA1B,YAAwCI,IAAI,UACpD,6BACI,4BAAKL,GACL,2BAAIE,MCmCDI,EAvBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAIf,OACI,6BAEIA,EAAOC,KAAI,SAACC,EAAKC,GACb,OACA,kBAAC,EAAD,CACAC,IAAOD,EACPT,GAAMM,EAAOG,GAAGT,GAChBD,KAAMO,EAAOG,GAAGV,KAChBE,MAAOK,EAAOG,GAAGR,MACjBU,SAAYL,EAAOG,GAAGE,gBCrBvBC,EAZG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aAChB,OACI,yBAAKX,UAAU,OACZ,2BACCA,UAAU,mCACVY,KAAK,QACLC,YAAY,SACZC,SAAUH,MCCPI,G,MARA,SAACnB,GACZ,OACI,yBAAKoB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACpEvB,EAAMwB,YCcAC,E,kDAhBX,WAAYzB,GAAO,IAAD,8BACd,cAAMA,IACD0B,MAAQ,CACTC,UAAU,GAHA,E,8DAMAC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAGxB,OAAGG,KAAKJ,MAAMC,SACH,uDAEJG,KAAK9B,MAAMwB,a,GAdEQ,aC6EbC,E,kDA/CX,aAAc,IAAD,8BACT,gBAiBJC,eAAiB,SAACC,GAEd,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAjB1C,EAAKZ,MAAQ,CACTlB,OAAQ,GACR4B,YAAa,IALR,E,gEASQ,IAAD,OAEhBG,MAAM,8CAA8CC,MAAK,SAAAC,GACrD,OAAOA,EAASC,UACjBF,MAAK,SAAAG,GACJ,EAAKZ,SAAS,CAACvB,OAAQmC,S,+BAUtB,IAAD,EAC2Bb,KAAKJ,MAA5BlB,EADJ,EACIA,OAAQ4B,EADZ,EACYA,YACVQ,EAAed,KAAKJ,MAAMlB,OAAOqC,QAAO,SAAAC,GAC1C,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASZ,EAAYW,kBAEzD,OAAIvC,EAAOyC,OAIH,yBAAK7C,UAAU,MACf,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWW,aAAce,KAAKI,iBAC9B,kBAAC,EAAD,KAEI,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU1B,OAAUoC,OATrB,6C,GA/BDZ,aCxBlBkB,IAASC,OAEP,kBAAC,EAAD,MACAC,SAASC,eAAe,SPyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLgC,QAAQhC,MAAMA,EAAMiC,a","file":"static/js/main.dc2818d1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst Card = (props) => {\n    const {name,id,email} = props;\n    return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n        <img src={`https://robohash.org/${id}?150*100`} alt='hello'/>\n        <div>\n            <h2>{name}</h2>\n            <p>{email}</p>\n        </div>\n    </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n// const CardList = ({robots}) => {\n//     const CardComponent = robots.map((user,i)=>{\n//         return (\n//         <Card \n//         key = {i}\n//         id = {robots[i].id} \n//         name={robots[i].name} \n//         email={robots[i].email} \n//         username = {robots[i].username}\n//         />\n//         );\n//     })\n//     return (\n//         <div>\n//             {CardComponent}\n//         </div>\n//     );\n// }\nconst CardList = ({robots}) => {\n    // if(true){\n    //     throw new Error('NOOOOOOO!');\n    // }\n    return (\n        <div>\n        {\n            robots.map((user,i)=>{\n                return (\n                <Card \n                key = {i}\n                id = {robots[i].id} \n                name={robots[i].name} \n                email={robots[i].email} \n                username = {robots[i].username}\n                />\n                );\n            })\n        }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) =>{\n    return (\n        <div className=\"pa2\">\n           <input \n            className=\"pa3 ba b--green bg-lightest-blue\" \n            type=\"seach\" \n            placeholder=\"search\"\n            onChange={searchChange}\n            /> \n        </div>\n    );\n}\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) =>{\n    return (\n        <div style={{overflowY: 'scroll', border: '2px solid black', height: '800px'}}>\n        {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;\n\n","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n    componentDidCatch(error,info){\n        this.setState({hasError:true})\n    }\n    render(){\n        if(this.state.hasError){\n            return <h1>Oops. This is not good.</h1>\n        }\n        return this.props.children\n    }\n}\nexport default ErrorBoundary;","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\n// Now, In this App, we have to add a feature where a search box is there and based on it we have to display\n// the robots. But, the problem is that how will the two components be able to talk to each other since they are seperate \n// from each other. Now , for this we use the term \"State\", which gives the description about the object and it helps in\n// the functioning of various components.\n\n\n//  For using State, we have to use the basic version of React, i.e. Using \"Classes\".\n// Lets see the use of classes.I will comment out the code that we had written first\n// const App = ()=>{\n//      return (\n//          <div className=\"tc\">\n//             <h1>Robo Friends</h1>\n//             <SearchBox/>\n//             <CardList robots = {robots}/>\n//         </div>\n//      );\n// }\n\n// The activities that are called here are in the order:\n// 1. constructor\n// 2. render\n// 3. componentDidMount\n// 4. render (because we are making changes in the componentDidMount and render changes everytime)\n\nclass App extends Component {\n    constructor(){\n        super()\n        // We will create the state object now. The things inside the state can change.\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n    }\n\n    componentDidMount() {\n        // Here we are fetching data from the website\n        fetch('https://jsonplaceholder.typicode.com/users').then(response =>{\n            return response.json();\n        }).then(users=>{\n            this.setState({robots: users});\n        })\n    }\n\n    onSearchChange = (event) => {\n        // Here we are assigning the searchfield with the values that we are getting from the function call\n        this.setState({ searchfield: event.target.value })\n        // console.log(filterRobots);\n    }\n    //  While using classes in react, we have to use render function to return the values\n    render(){\n        const { robots, searchfield} = this.state;\n        const filterRobots = this.state.robots.filter(robot =>{\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n        })\n        if(!robots.length){\n            return <h3>Loading..</h3>\n        }else{\n            return (\n                <div className=\"tc\">\n                <h1 className=\"f1\">Robo Friends</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <Scroll>\n                    {/* Error Boundary is used to check for errors for a component */}\n                    <ErrorBoundary>\n                    <CardList robots = {filterRobots}/>\n                    </ErrorBoundary>\n                </Scroll>\n            </div>\n            );\n        }\n    }\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\n  \nReactDOM.render(\n\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}